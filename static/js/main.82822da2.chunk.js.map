{"version":3,"sources":["assets/svg/zoovu-o.svg","assets/svg/zoovu-z.svg","assets/svg/zoovu-u.svg","assets/svg/zoovu-v.svg","screens/Welcome/index.js","components/InfoBanner/index.js","components/LogoItem/index.js","components/Square/index.js","components/ExtraInfo/index.js","constants/index.js","utils/index.js","screens/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Welcome","setUsername","useState","value","setValue","className","TextField","inputProps","min","style","textAlign","onChange","target","data-testid","placeholder","Button","variant","onClick","endIcon","fontSize","InfoBanner","seconds","username","color","LogoItem","item","type","image","index","droppable","startTimer","isFinished","useDrag","begin","collect","monitor","isDragging","drag","ref","opacity","fontWeight","cursor","src","alt","Square","updateArrays","useDrop","accept","drop","dropedItem","canDrop","active","isOver","ExtraInfo","LOGO_TYPES","LogoZ","key","LogoO","LogoV","LogoU","initSquare","array","every","Game","setSeconds","isActive","setIsActive","initSquares","setInitSquares","targetSquares","setTargetSquares","loading","setLoading","initIndex","targetIndex","renderLogoItems","logos","classes","map","logo","useEffect","sort","Math","random","logoType","interval","setInterval","clearInterval","DndProvider","backend","HTML5Backend","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82822da2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zoovu-o.987e802d.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoovu-z.98d275b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoovu-u.509452d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoovu-v.f04e5e7e.svg\";","import React, { useState } from 'react';\nimport { func } from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport ArrowRightAlt from '@material-ui/icons/ArrowRightAlt';\nimport './styles.scss';\n\nexport const Welcome = ({ setUsername }) => {\n  const [value, setValue] = useState('');\n  return (\n    <div className=\"welcome-container wrapper\">\n      <div className=\"welcome-content\">\n        <h3>Hello friend, tell me your name...</h3>\n        <TextField\n          value={value}\n          inputProps={{ min: 0, style: { textAlign: 'center' } }}\n          onChange={({ target }) => {\n            setValue(target.value);\n          }}\n          data-testid=\"text-input\"\n          className=\"welcome-input\"\n          placeholder=\"Your name here\"\n        />\n        <Button\n          variant=\"contained\"\n          data-testid=\"continue-button\"\n          onClick={() => setUsername(value)}\n          className=\"welcome-button\"\n          endIcon={<ArrowRightAlt fontSize=\"large\" />}\n        >\n          Let's go\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nWelcome.propTypes = {\n  setUsername: func\n};\n","import React from 'react';\nimport QueryBuilder from '@material-ui/icons/QueryBuilder';\nimport { string, number } from 'prop-types';\nimport './styles.scss';\n\nexport const InfoBanner = ({ seconds, username }) => (\n  <div className=\"info-margin-top\">\n    <div className=\"info-row\">\n      <div className=\"info-username\">Good Luck, {username}!</div>\n      <div className=\"info-score\">\n        <QueryBuilder style={{ color: 'green' }} /> Your score: {seconds}{' '}\n        seconds\n      </div>\n    </div>\n    <div className=\"info-row info-subtitle\">\n      <span>Pick up the right cards</span>\n      <span>The faster the better!</span>\n    </div>\n  </div>\n);\n\nInfoBanner.propTypes = {\n  username: string,\n  seconds: number\n};\n","import { func, object, bool } from 'prop-types';\nimport React from 'react';\nimport { useDrag } from 'react-dnd';\nimport './styles.scss';\n\nexport const LogoItem = ({\n  item: { type, image, index, droppable },\n  startTimer,\n  isFinished\n}) => {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type, index, droppable },\n    begin: () => {\n      if (!isFinished) {\n        startTimer();\n      }\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n\n  return (\n    <div\n      ref={drag}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        fontSize: 25,\n        fontWeight: 'bold',\n        cursor: 'move'\n      }}\n    >\n      <img className=\"logo-image\" src={image} alt=\"React Logo\" />\n    </div>\n  );\n};\n\nLogoItem.propTypes = {\n  item: object,\n  startTimer: func,\n  isFinished: bool\n};\n","import { func, object, string, bool } from 'prop-types';\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nimport { LogoItem } from '../LogoItem';\nimport './styles.scss';\n\nexport const Square = ({\n  item,\n  updateArrays,\n  startTimer,\n  isFinished,\n  className\n}) => {\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept: item.type,\n    drop: dropedItem => {\n      updateArrays(dropedItem.index, item.index);\n    },\n    canDrop: dropedItem =>\n      dropedItem.type === item.type &&\n      item.droppable &&\n      !dropedItem.droppable &&\n      !item.active,\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n      canDrop: !!monitor.canDrop()\n    })\n  });\n\n  return (\n    <div ref={drop} className={`square-container ${className}`}>\n      {item.active && (\n        <LogoItem isFinished={isFinished} item={item} startTimer={startTimer} />\n      )}\n    </div>\n  );\n};\n\nSquare.propTypes = {\n  item: object,\n  updateArrays: func,\n  startTimer: func,\n  isFinished: bool,\n  className: string\n};\n","import React from 'react';\n// import './styles.scss';\n\nexport const ExtraInfo = () => (\n  <div className=\"info-margin-top\">\n    <div className=\"info-row info-subtitle\">\n      <span>\n        ...and drop them here to make the logo great <label>again!</label>\n      </span>\n    </div>\n  </div>\n);\n","import LogoZ from '../assets/svg/zoovu-z.svg';\nimport LogoO from '../assets/svg/zoovu-o.svg';\nimport LogoU from '../assets/svg/zoovu-u.svg';\nimport LogoV from '../assets/svg/zoovu-v.svg';\n\nexport const LOGO_TYPES = [\n  {\n    image: LogoZ,\n    type: 'z',\n    key: '1'\n  },\n  {\n    image: LogoO,\n    type: 'o',\n    key: '2'\n  },\n  {\n    image: LogoO,\n    type: 'o',\n    key: '3'\n  },\n  {\n    image: LogoV,\n    type: 'v',\n    key: '4'\n  },\n  {\n    image: LogoU,\n    type: 'u',\n    key: '5'\n  }\n];\n","export const initSquare = (active, { image, type, key }, index) => ({\n  active,\n  image,\n  key,\n  type,\n  index,\n  droppable: !active\n});\n\nexport const shuffleElements = array =>\n  [...array].sort(() => Math.random() - 0.5);\n\nexport const isFinished = array => array.every(item => item.active);\n","import React, { useEffect, useState } from 'react';\nimport { string } from 'prop-types';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { InfoBanner, Square, ExtraInfo } from '../../components';\nimport { LOGO_TYPES } from '../../constants';\nimport { initSquare, shuffleElements, isFinished } from '../../utils';\nimport './styles.scss';\n\nexport const Game = ({ username }) => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [initSquares, setInitSquares] = useState([]);\n  const [targetSquares, setTargetSquares] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const updateArrays = (initIndex, targetIndex) => {\n    setLoading(true);\n    initSquares[initIndex] = { ...initSquares[initIndex], active: false };\n    targetSquares[targetIndex] = {\n      ...targetSquares[targetIndex],\n      active: true\n    };\n    setInitSquares(initSquares);\n    setTargetSquares(targetSquares);\n    setLoading(false);\n    if (isFinished(targetSquares)) setIsActive(false);\n  };\n\n  const renderLogoItems = (logos, classes) => (\n    <div className=\"game-items-row\">\n      {logos.map(logo => (\n        <Square\n          key={`sq-${logo.key}-${logo.droppable}`}\n          startTimer={() => setIsActive(true)}\n          updateArrays={updateArrays}\n          item={logo}\n          className={classes}\n          isFinished={isFinished(targetSquares)}\n        ></Square>\n      ))}\n    </div>\n  );\n\n  useEffect(() => {\n    // Initialice both arrays\n    setInitSquares(\n      shuffleElements(LOGO_TYPES).map((logoType, index) =>\n        initSquare(true, logoType, index)\n      )\n    );\n    setTargetSquares(\n      LOGO_TYPES.map((logoType, index) => initSquare(false, logoType, index))\n    );\n  }, []);\n\n  useEffect(() => {\n    // Handle Timer\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds + 1);\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n\n  return (\n    <div className=\"wrapper\">\n      <DndProvider backend={HTML5Backend}>\n        {!loading && (\n          <div className=\"game-wrapper wrapper\">\n            <InfoBanner username={username} seconds={seconds} />\n            {renderLogoItems(initSquares, 'init-squares')}\n            <ExtraInfo />\n            {renderLogoItems(targetSquares, 'target-squares')}\n          </div>\n        )}\n      </DndProvider>\n    </div>\n  );\n};\n\nGame.propTypes = {\n  username: string\n};\n","import React, { useState } from 'react';\nimport { WelcomeScreen, GameScreen } from './screens';\nimport './App.scss';\n\nconst App = () => {\n  const [username, setUsername] = useState('');\n  return (\n    <>\n      {username ? (\n        <GameScreen username={username} />\n      ) : (\n        <WelcomeScreen setUsername={setUsername} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}