{"version":3,"sources":["assets/svg/zoovu-o.svg","assets/svg/zoovu-z.svg","assets/svg/zoovu-u.svg","assets/svg/zoovu-v.svg","screens/Welcome/index.js","components/InfoBanner/index.js","components/LogoItem/index.js","components/Square/index.js","components/ExtraInfo/index.js","constants/index.js","utils/index.js","screens/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Welcome","setUsername","useState","value","setValue","className","TextField","inputProps","min","style","textAlign","onChange","target","data-testid","placeholder","Button","variant","onClick","endIcon","fontSize","InfoBanner","seconds","username","isFinished","color","LogoItem","item","type","activeImage","index","droppable","image","activeType","startTimer","useDrag","begin","collect","monitor","isDragging","drag","ref","opacity","fontWeight","cursor","src","alt","Square","updateArrays","useDrop","accept","drop","dropedItem","canDrop","active","isOver","ExtraInfo","LOGO_TYPES","LogoZ","key","LogoO","LogoV","LogoU","initSquare","match","Game","setSeconds","isActive","setIsActive","initSquares","setInitSquares","targetSquares","setTargetSquares","loading","setLoading","every","initGame","array","sort","Math","random","map","logoType","origin","auxInitSquares","setTimeout","renderLogoItems","logos","classes","logo","useEffect","interval","setInterval","clearInterval","DndProvider","backend","HTML5Backend","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cc21c49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zoovu-o.987e802d.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoovu-z.98d275b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoovu-u.509452d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoovu-v.f04e5e7e.svg\";","import React, { useState } from 'react';\nimport { func } from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport ArrowRightAlt from '@material-ui/icons/ArrowRightAlt';\nimport './styles.scss';\n\nexport const Welcome = ({ setUsername }) => {\n  const [value, setValue] = useState('');\n  return (\n    <div className=\"welcome-container wrapper\">\n      <div className=\"welcome-content\">\n        <h3>Hello friend, tell me your name...</h3>\n        <TextField\n          value={value}\n          inputProps={{ min: 0, style: { textAlign: 'center' } }}\n          onChange={({ target }) => {\n            setValue(target.value);\n          }}\n          data-testid=\"text-input\"\n          className=\"welcome-input\"\n          placeholder=\"Your name here\"\n        />\n        <Button\n          variant=\"contained\"\n          data-testid=\"continue-button\"\n          onClick={() => setUsername(value)}\n          className=\"welcome-button\"\n          endIcon={<ArrowRightAlt fontSize=\"large\" />}\n        >\n          Let's go\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nWelcome.propTypes = {\n  setUsername: func\n};\n","import React from 'react';\nimport QueryBuilder from '@material-ui/icons/QueryBuilder';\nimport { string, number, bool } from 'prop-types';\nimport './styles.scss';\n\nexport const InfoBanner = ({ seconds, username, isFinished }) => (\n  <div className=\"info-margin-top\">\n    <div className=\"info-row\">\n      <div className=\"info-username\">Good Luck, {username}!</div>\n      {isFinished && (\n        <div className=\"info-score\">\n          <QueryBuilder style={{ color: 'green' }} /> Your score: {seconds}{' '}\n          seconds\n        </div>\n      )}\n    </div>\n    <div className=\"info-row info-subtitle\">\n      <span>Pick up the right cards</span>\n      <span>The faster the better!</span>\n    </div>\n  </div>\n);\n\nInfoBanner.propTypes = {\n  username: string,\n  seconds: number,\n  isFinished: bool\n};\n","import { func, object, bool } from 'prop-types';\nimport React from 'react';\nimport { useDrag } from 'react-dnd';\nimport './styles.scss';\n\nexport const LogoItem = ({\n  item: { type, activeImage, index, droppable, image, activeType },\n  startTimer,\n  isFinished\n}) => {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type, index, droppable, image, activeImage, activeType },\n    begin: () => {\n      if (!isFinished) {\n        startTimer();\n      }\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n\n  return (\n    <div\n      ref={drag}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        fontSize: 25,\n        fontWeight: 'bold',\n        cursor: 'move'\n      }}\n    >\n      <img\n        className=\"logo-image\"\n        src={droppable ? activeImage : image}\n        alt=\"React Logo\"\n      />\n    </div>\n  );\n};\n\nLogoItem.propTypes = {\n  item: object,\n  startTimer: func,\n  isFinished: bool\n};\n","import { func, object, string, bool } from 'prop-types';\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nimport { LogoItem } from '../LogoItem';\nimport './styles.scss';\n\nconst activeCondition = (init, target) => {\n  if (!init.droppable) return !target.active;\n  return true;\n};\n\nexport const Square = ({\n  item,\n  updateArrays,\n  startTimer,\n  isFinished,\n  className\n}) => {\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept: ['z', 'o', 'v', 'u'],\n    drop: dropedItem => {\n      updateArrays(dropedItem, item);\n    },\n    canDrop: dropedItem => item.droppable && activeCondition(dropedItem, item),\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n      canDrop: !!monitor.canDrop()\n    })\n  });\n\n  return (\n    <div ref={drop} className={`square-container ${className}`}>\n      {item.active && (\n        <LogoItem isFinished={isFinished} item={item} startTimer={startTimer} />\n      )}\n    </div>\n  );\n};\n\nSquare.propTypes = {\n  item: object,\n  updateArrays: func,\n  startTimer: func,\n  isFinished: bool,\n  className: string\n};\n","import React from 'react';\n// import './styles.scss';\n\nexport const ExtraInfo = () => (\n  <div className=\"info-margin-top\">\n    <div className=\"info-row info-subtitle\">\n      <span>\n        ...and drop them here to make the logo great <label>again!</label>\n      </span>\n    </div>\n  </div>\n);\n","import LogoZ from '../assets/svg/zoovu-z.svg';\nimport LogoO from '../assets/svg/zoovu-o.svg';\nimport LogoU from '../assets/svg/zoovu-u.svg';\nimport LogoV from '../assets/svg/zoovu-v.svg';\n\nexport const LOGO_TYPES = [\n  {\n    image: LogoZ,\n    type: 'z',\n    key: '1'\n  },\n  {\n    image: LogoO,\n    type: 'o',\n    key: '2'\n  },\n  {\n    image: LogoO,\n    type: 'o',\n    key: '3'\n  },\n  {\n    image: LogoV,\n    type: 'v',\n    key: '4'\n  },\n  {\n    image: LogoU,\n    type: 'u',\n    key: '5'\n  }\n];\n","export const initSquare = (active, { image, type, key }, index) => ({\n  active,\n  image,\n  key,\n  type,\n  index,\n  droppable: !active,\n  match: false,\n  activeImage: null,\n  activeType: null\n});\n\nexport const shuffleElements = array =>\n  [...array].sort(() => Math.random() - 0.5);\n","import React, { useEffect, useState } from 'react';\nimport { string } from 'prop-types';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { InfoBanner, Square, ExtraInfo } from '../../components';\nimport { LOGO_TYPES } from '../../constants';\nimport { initSquare, shuffleElements } from '../../utils';\nimport './styles.scss';\n\nexport const Game = ({ username }) => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [initSquares, setInitSquares] = useState([]);\n  const [targetSquares, setTargetSquares] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const isFinished = () => {\n    return targetSquares.every(item => item.match);\n  };\n\n  const initGame = () => {\n    // Initialice both arrays\n    setInitSquares(\n      shuffleElements(LOGO_TYPES).map((logoType, index) =>\n        initSquare(true, logoType, index)\n      )\n    );\n    setTargetSquares(\n      LOGO_TYPES.map((logoType, index) => initSquare(false, logoType, index))\n    );\n    setSeconds(0);\n  };\n\n  const updateArrays = (origin, target) => {\n    setLoading(true);\n    const match = (origin.activeType || origin.type) === target.type;\n    if (!match) {\n      // If it does not match, 10 extra seconds\n      setSeconds(seconds + 10);\n    }\n    const auxInitSquares = !origin.droppable ? initSquares : targetSquares;\n    auxInitSquares[origin.index] = {\n      ...auxInitSquares[origin.index],\n      active: target.active,\n      match: target.active && match,\n      activeImage: target.activeImage,\n      activeType: target.active ? target.activeType || target.type : null\n    };\n    targetSquares[target.index] = {\n      ...targetSquares[target.index],\n      active: true,\n      match,\n      activeImage: origin.droppable ? origin.activeImage : origin.image,\n      activeType: origin.activeType || origin.type\n    };\n    if (!origin.droppable) {\n      setInitSquares(auxInitSquares);\n    }\n    setTargetSquares(targetSquares);\n    setLoading(false);\n    if (isFinished()) {\n      setIsActive(false);\n      setTimeout(() => initGame(), 10000);\n    }\n  };\n\n  const renderLogoItems = (logos, classes) => (\n    <div className=\"game-items-row\">\n      {logos.map(logo => (\n        <Square\n          key={`sq-${logo.key}-${logo.droppable}`}\n          startTimer={() => setIsActive(true)}\n          updateArrays={updateArrays}\n          item={logo}\n          className={classes}\n          isFinished={isFinished()}\n        ></Square>\n      ))}\n    </div>\n  );\n\n  useEffect(() => {\n    initGame();\n  }, []);\n\n  useEffect(() => {\n    // Handle Timer\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds + 1);\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n\n  return (\n    <div className=\"wrapper\">\n      <DndProvider backend={HTML5Backend}>\n        {!loading && (\n          <div className=\"game-wrapper wrapper\">\n            <InfoBanner\n              username={username}\n              seconds={seconds}\n              isFinished={isFinished()}\n            />\n            {renderLogoItems(initSquares, 'init-squares')}\n            <ExtraInfo />\n            {renderLogoItems(targetSquares, 'target-squares')}\n          </div>\n        )}\n      </DndProvider>\n    </div>\n  );\n};\n\nGame.propTypes = {\n  username: string\n};\n","import React, { useState } from 'react';\nimport { WelcomeScreen, GameScreen } from './screens';\nimport './App.scss';\n\nconst App = () => {\n  const [username, setUsername] = useState('');\n  return (\n    <>\n      {username ? (\n        <GameScreen username={username} />\n      ) : (\n        <WelcomeScreen setUsername={setUsername} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}